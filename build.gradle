plugins {
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = "$game_version-$mod_version"
group = 'com.github.kay9.dragonmounts'

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceSets {
    // include generated resources
    main.resources { srcDir 'src/generated/resources' }

    // include example addon
    exampleAddon {
        resources {
            srcDir "example_addon"
        }
    }
}

minecraft {
    mappings channel: 'parchment', version: "${mappings_version}"

    copyIdeResources = true

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'

            mods {
                // required if including example below
                "${mod_id}" {
                    source sourceSets.main
                }

                // include example addon as individual mod
                example_addon {
                    source sourceSets.exampleAddon
                }
            }
        }

        client {}

        client2 {
            //noinspection GroovyAssignabilityCheck
            parent runs.client
            args '--username', 'Dev2'
        }

        server {
            arg "nogui"
        }

        data {
            args '--mod', "${mod_id}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

repositories {}

dependencies {
    minecraft "net.minecraftforge:forge:${game_version}-${forge_version}"

    annotationProcessor "org.spongepowered:mixin:${mixin_processor_version}:processor"
}

processResources {
    var replaceProperties = [
            minecraft_version: game_version,
            minecraft_version_range: game_version_range,
            forge_version: forge_version,
            forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id,
            mod_name: mod_name,
            mod_version: mod_version,
            game_pack_format: game_pack_format
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties
    }
}

mixin {
    add sourceSets.main, "${mod_id}.mixins.refmap.json"
    config "${mod_id}.mixins.json"

    debug.export = true
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "dragonmounts",
                "Specification-Vendor"    : "Kay9",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Kay9",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'

    // data-gen artifacts aren't necessary in release builds.
    exclude('com/github/kay9/dragonmounts/data/providers/**')
    exclude('.cache')
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}